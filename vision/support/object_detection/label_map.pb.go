// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: label_map.proto

package object_detection

import (
	fmt "fmt"
	io "io"
	math "math"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StringIntLabelMapItem struct {
	// String name. The most common practice is to set this to a MID or synsets
	// id.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	// Integer id that maps to the string name above. Label ids should start from
	// 1.
	Id int32 `protobuf:"varint,2,opt,name=id" json:"id"`
	// Human readable string label.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name"`
}

func (m *StringIntLabelMapItem) Reset()         { *m = StringIntLabelMapItem{} }
func (m *StringIntLabelMapItem) String() string { return proto.CompactTextString(m) }
func (*StringIntLabelMapItem) ProtoMessage()    {}
func (*StringIntLabelMapItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4231908ebde26c, []int{0}
}
func (m *StringIntLabelMapItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringIntLabelMapItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringIntLabelMapItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringIntLabelMapItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringIntLabelMapItem.Merge(m, src)
}
func (m *StringIntLabelMapItem) XXX_Size() int {
	return m.Size()
}
func (m *StringIntLabelMapItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StringIntLabelMapItem.DiscardUnknown(m)
}

var xxx_messageInfo_StringIntLabelMapItem proto.InternalMessageInfo

func (m *StringIntLabelMapItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StringIntLabelMapItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StringIntLabelMapItem) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type StringIntLabelMap struct {
	Item []*StringIntLabelMapItem `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (m *StringIntLabelMap) Reset()         { *m = StringIntLabelMap{} }
func (m *StringIntLabelMap) String() string { return proto.CompactTextString(m) }
func (*StringIntLabelMap) ProtoMessage()    {}
func (*StringIntLabelMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4231908ebde26c, []int{1}
}
func (m *StringIntLabelMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringIntLabelMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringIntLabelMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringIntLabelMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringIntLabelMap.Merge(m, src)
}
func (m *StringIntLabelMap) XXX_Size() int {
	return m.Size()
}
func (m *StringIntLabelMap) XXX_DiscardUnknown() {
	xxx_messageInfo_StringIntLabelMap.DiscardUnknown(m)
}

var xxx_messageInfo_StringIntLabelMap proto.InternalMessageInfo

func (m *StringIntLabelMap) GetItem() []*StringIntLabelMapItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func init() {
	proto.RegisterType((*StringIntLabelMapItem)(nil), "object_detection.StringIntLabelMapItem")
	proto.RegisterType((*StringIntLabelMap)(nil), "object_detection.StringIntLabelMap")
}

func init() { proto.RegisterFile("label_map.proto", fileDescriptor_9f4231908ebde26c) }

var fileDescriptor_9f4231908ebde26c = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x49, 0x4c, 0x4a,
	0xcd, 0x89, 0xcf, 0x4d, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc8, 0x4f, 0xca,
	0x4a, 0x4d, 0x2e, 0x89, 0x4f, 0x49, 0x2d, 0x49, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x53, 0x2a, 0xe0,
	0x12, 0x0d, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0xf7, 0xcc, 0x2b, 0xf1, 0x01, 0xa9, 0xf6, 0x4d, 0x2c,
	0xf0, 0x2c, 0x49, 0xcd, 0x15, 0x92, 0xe0, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x74, 0x62, 0x39, 0x71, 0x4f, 0x9e, 0x21, 0x08, 0x2c, 0x22, 0x24, 0xc2, 0xc5, 0x94,
	0x99, 0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x0a, 0x15, 0x67, 0xca, 0x4c, 0x11, 0x52, 0xe7, 0xe2,
	0x49, 0xc9, 0x2c, 0x2e, 0xc8, 0x49, 0xac, 0x8c, 0x07, 0xeb, 0x63, 0x46, 0xd2, 0xc7, 0x0d, 0x95,
	0xf1, 0x4b, 0xcc, 0x4d, 0x55, 0x0a, 0xe0, 0x12, 0xc4, 0xb0, 0x51, 0xc8, 0x9a, 0x8b, 0x25, 0xb3,
	0x24, 0x35, 0x57, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x5d, 0x0f, 0xdd, 0x9d, 0x7a, 0x58,
	0x1d, 0x19, 0x04, 0xd6, 0xe4, 0x24, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0xc1, 0xd7, 0x19, 0x01, 0x01, 0x00, 0x00,
}

func (m *StringIntLabelMapItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringIntLabelMapItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLabelMap(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	i = encodeVarintLabelMap(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLabelMap(dAtA, i, uint64(len(m.DisplayName)))
	i += copy(dAtA[i:], m.DisplayName)
	return i, nil
}

func (m *StringIntLabelMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringIntLabelMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLabelMap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintLabelMap(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StringIntLabelMapItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovLabelMap(uint64(l))
	n += 1 + sovLabelMap(uint64(m.Id))
	l = len(m.DisplayName)
	n += 1 + l + sovLabelMap(uint64(l))
	return n
}

func (m *StringIntLabelMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovLabelMap(uint64(l))
		}
	}
	return n
}

func sovLabelMap(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLabelMap(x uint64) (n int) {
	return sovLabelMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StringIntLabelMapItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringIntLabelMapItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringIntLabelMapItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLabelMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLabelMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLabelMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLabelMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringIntLabelMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabelMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringIntLabelMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringIntLabelMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabelMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabelMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLabelMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &StringIntLabelMapItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabelMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabelMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLabelMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLabelMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLabelMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabelMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLabelMap
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLabelMap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLabelMap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLabelMap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLabelMap
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLabelMap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLabelMap   = fmt.Errorf("proto: integer overflow")
)
